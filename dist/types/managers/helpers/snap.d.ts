import type { ViewManager } from 'src/types';
import EventEmitter from 'event-emitter';
import Layout from '../../layout';
import { View } from './views';
import Contents from '../../contents';
type EventEmitterMethods = Pick<EventEmitter, 'emit' | 'on' | 'off'>;
declare class Snap implements EventEmitterMethods {
    private isTouchEvent;
    emit: EventEmitter['emit'];
    on: EventEmitter['on'];
    off: EventEmitter['off'];
    touchCanceler: boolean;
    resizeCanceler: boolean;
    snapping: boolean;
    startTouchX?: number;
    startTouchY?: number;
    startTime?: number;
    endTouchX?: number;
    endTouchY?: number;
    endTime?: number;
    scrollLeft?: number;
    scrollTop?: number;
    manager: ViewManager;
    layout: Layout;
    fullsize?: boolean;
    element: HTMLElement;
    scroller: HTMLElement | Window;
    isVertical?: boolean;
    _onResize?: () => void;
    _onScroll?: () => void;
    _onTouchStart?: (e: Event) => void;
    _onTouchMove?: (e: Event) => void;
    _onTouchEnd?: (e: Event) => void;
    _afterDisplayed?: (view: View) => void;
    settings: {
        duration: number;
        minVelocity: number;
        minDistance: number;
        [key: string]: unknown;
    };
    private _supportsTouch;
    constructor(manager: ViewManager, options: {
        [key: string]: unknown;
    });
    setup(manager: ViewManager): void;
    supportsTouch(): boolean;
    disableScroll(): void;
    enableScroll(): void;
    addListeners(): void;
    removeListeners(): void;
    afterDisplayed(view: View): void;
    triggerViewEvent(e: Event, contents: Contents): void;
    onScroll(): void;
    onResize(): void;
    onTouchStart(e: Event): void;
    onTouchMove(e: Event): void;
    onTouchEnd(e?: Event): void;
    wasSwiped(): 0 | 1 | -1 | undefined;
    needsSnap(): boolean;
    snap(howMany?: number): Promise<unknown>;
    smoothScrollTo(destination: number): Promise<unknown>;
    scrollTo(left?: number, top?: number): void;
    now(): number;
    destroy(): void;
}
export default Snap;
